<launch>
  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 base_link laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="map_to_blackmap" args="0 0 0 0 0 0 map blackmap 30" />
  <node pkg="tf" type="static_transform_publisher" name="map_to_move_base" args="0 0 0 0 0 0 map move_base 30" />
  <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_visited" args="0 0 0 0 0 0 map visited 30" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_corrected_map" args="0 0 0 0 0 0 map map_corrected 30" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 base_link laser 30" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 base_footprint base_link 30" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_base_footprint" args="0 0 0 0 0 0 odom base_footprint 30" /> -->
  <node pkg="tf" type="static_transform_publisher" name="odom_to_base_link" args="0 0 0 0 0 0 odom base_link 30" />
  <!-- map to odom will be provided by the AMCL -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" /> -->

  <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino -->  
  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  <!-- Subscribe: /cmd_vel -->
  <!-- Publish: /right_ticks, /left_ticks -->
  <!-- <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="9600"/> 115200
  </node> -->
  <!-- <node pkg="rosserial_server" type="serial_node" name="rosserial_server">
    <param name="port" value="/dev/ttyACM0" />
  </node> -->
		
  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
  <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d /home/automaticaddison/catkin_ws/src/jetson_nano_bot/navigation_data_pub/maps/floorplan4.rviz">
  </node> -->

  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node>   

  <!-- Lidar Data Publisher -->
  <!-- Used for obstacle avoidance and can be used for mapping --> 
  <!-- Publish: /scan -->
  <!--<node name="LD06" pkg="ldlidar" type="ldlidar" output="screen" >
    <param name="topic_name" value="/scan"/>
    <param name="port_name" value ="/dev/ttyUSB0"/>
    <param name="frame_id" value="laser"/>
  </node>-->
   <node name="LD06" pkg="ldlidar_stl_ros" type="ldlidar_stl_ros_node" output="screen" >
    <param name="product_name" value="LDLiDAR_LD06"/>
    <param name="topic_name" value="/scan"/>
    <param name="port_name" value ="/dev/ttyUSB0"/>
    <param name="frame_id" value="laser"/>
  </node>

  <!-- <node name="cartographer_node" pkg="cartographer_ros"
      type="cartographer_node" args="
          -configuration_directory /home/ubuntu/carto_ws/src/cartographer_ros/cartographer_ros/configuration_files/
          -configuration_basename backpack_2d.lua"
      output="screen">
    <remap from="echoes" to="horizontal_laser_2d" />
  </node>

  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
      type="cartographer_occupancy_grid_node" args="-resolution 0.05" /> -->

  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    <param name="use_tf_scan_transformation" value="true" />
    <param name="use_tf_pose_start_estimate" value="false" />
    <param name="map_resolution" value="0.025" />
    <param name="map_size" value="2048" />
    <param name="laser_min_dist" value="0.08" />
    <param name="laser_max_dist" value="0.7" />
    <param name="scan_subscriber_queue_size" value="5" />
    <param name="scan_topic" value="scan" />
    <param name="map_update_distance_thresh" value="0.02" />
    <param name="map_update_angle_thresh" value="0.31" />
    <param name="update_factor_occupied" value="0.90"/>
    <param name="update_factor_free" value="0.10" />
    <param name="tf_map_scanmatch_transform_frame_name" value="scanmatcher_frame" />
    <!-- <remap from="/map" to="/hectormap" /> -->
  </node>
	
  <!-- goalFinder Node -->
  <node name="goalfinder" pkg="goalFinder" type="goalFinder.py" output="screen"/>

  <!-- Move Base Node -->
  <!-- Subscribe: /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <arg name="node_start_delay" default="3.0" />  
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
    <param name="planner_frequency" value="1" /> <!-- 0.02 -->
    <param name="controller_frequency" value="5.0" />
    <rosparam file="/home/ubuntu/lidar_ws/src/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="/home/ubuntu/lidar_ws/src/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="/home/ubuntu/lidar_ws/src/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="/home/ubuntu/lidar_ws/src/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="/home/ubuntu/lidar_ws/src/param/base_local_planner_params.yaml" command="load" />
  </node>
</launch>
